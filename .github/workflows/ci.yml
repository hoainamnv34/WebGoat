name: Continuous Integration
on:
  workflow_dispatch:

# Các biến môi trường:
#   DEFECTDOJO_URL: Địa chỉ URL của DefectDojo
#   DEFECT_DOJO_API_TOKEN: Token của DefectDojo
#   DOJO_PRODUCT: ứng với tên Product trong DefectDojo
#   DOJO_ENGAGEMENT: ứng với tên Engagement trong Product
#   SONAR_HOST_URL: URL của SonarQube Server
#   SONAR_PROJECT: projectKey của project trong SonarQube
#   SONAR_TOKEN: Token xác thực với SonarQube Server, được lấy từ secret `SONAR_TOKEN`
env:
  DEFECTDOJO_URL: 'https://defectdojo.vbeecore.com'
  DEFECT_DOJO_API_TOKEN: '42e9046f889e6d43fe020bb803f44e73173c1367'
  DOJO_PRODUCT: 'WebGoat' 
  DOJO_ENGAGEMENT: 'Beta CI'
  SONAR_HOST_URL: 'https://sonarqube.vbeecore.com'
  SONAR_PROJECT: 'WebGoat-App'
  SONAR_TOKEN: 'sqa_b4f429a78412d3a597e44dc5676e306816bca5e9'

jobs:
  # Secret Scanning
  secret-scanning: 
    name: Secret Scanning
    runs-on: ubuntu-latest
    container:
      image: zricethezav/gitleaks:latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Secret Scanning
        uses: hoainamnv34/gitleaks@main
        with:
          # folder cần quét 
          source: '.'
          # File kết quả
          report_path: 'report.json'
          # Định dạng kết quả
          report_format: 'json'
        # cho phép luồng tiếp tục ngay cả khi phát hiện error
        continue-on-error: true
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitleak-report
          path: report.json

  # Upload Secret Scanning Results lên DefectDojo
  import-secret-Scanning:
    needs: secret-scanning
    name: Upload Results
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: gitleak-report
          path: .
      - name: import to DefectDojo
        uses: hoainamnv34/import-to-DefectDojo@main
        with:
          host: '${{env.DEFECTDOJO_URL}}' # Địa chỉ URL của DefectDojo, được lấy từ biến môi trường 'DEFECTDOJO_URL'
          product: ${{env.DOJO_PRODUCT}} # Tên Product trong DefectDojo, được lấy từ biến môi trường 'DOJO_PRODUCT'
          engagement: ${{env.DOJO_ENGAGEMENT}} # Tên engagement trong DefectDojo, được lấy từ biến môi trường 'DOJO_ENGAGEMENT'
          scan: 'Gitleaks Scan' # Loại scan
          report: 'report.json'  # Path của file report
          token:  ${{ env.DEFECT_DOJO_API_TOKEN }} # Token của DefectDojo. Lấy tại DEFECTDOJO_URL/api/key-v2. Được lưu trong secrets của repo
          active: "True" # Đánh dấu các findings trong lần upload này là active
          verified: "True" # Đánh dấu các findings trong lần upload này là verified
          test_title: "Secret Scanning"  # Tiêu đề của bài kiểm thử
          close_old_findings: "True" # Đóng các findings cũ nếu có findings mới
          close_old_findings_product_scope: "True" # Đóng các findings cũ trong phạm vi sản phẩm nếu có findings mới
          branch_tag: "${{ github.event.base_ref }}"
          commit_hash: "${{ github.sha }}"

  # Software Composition Analysis     
  SCA:
    name: SCA
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: SCA Scanning
        uses: hoainamnv34/dependency-check@main
        with:
          project: ${{env.DOJO_PRODUCT}} # Tên project, được lấy từ biến môi trường 'DOJO_PRODUCT'
          path: '.' # Đường dẫn tới thư mục cần quét
          format: 'XML'    # Định dạng của báo cáo kết quả quét là 'XML' 
      - name: Upload Test results
        uses: actions/upload-artifact@v4
        with:
          name: SCA-report
          path: ./reports
  
  # Upload Software Composition Analysis Results lên DefectDojo (tương tự Upload Secret Scanning)
  import-SCA:
    needs: SCA
    name: Upload results
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: SCA-report
          path: .
      - name: import to DefectDojo
        uses: hoainamnv34/import-to-DefectDojo@main
        with:
          host: '${{env.DEFECTDOJO_URL}}'
          product: ${{env.DOJO_PRODUCT}}
          engagement: ${{env.DOJO_ENGAGEMENT}}
          scan: 'Dependency Check Scan'
          report: 'dependency-check-report.xml'
          token:  ${{ env.DEFECT_DOJO_API_TOKEN }}
          active: "True"
          verified: "True"
          test_title: "Software Composition Analysis"
          close_old_findings: "True"
          close_old_findings_product_scope: "True"
          branch_tag: "${{ github.event.base_ref }}"
          commit_hash: "${{ github.sha }}"

  # Static Application Security Testing     
  SAST: 
    name: SAST
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Dùng sonar-scanner-cli để yêu cầu tới SonarQube Server
      # -e SONAR_HOST_URL: URL của SonarQube Server, được lấy từ biến `vars.SONAR_HOST_URL`
      # -e SONAR_SCANNER_OPTS: Tùy chọn cho SonarScanner, bao gồm projectKey, loại trừ các tệp `.java`, và thiết lập bộ nhớ tối đa
      # -e SONAR_TOKEN: Token xác thực với SonarQube Server, được lấy từ secret `SONAR_TOKEN`
      # -v "./:/usr/src" Đường dẫn tới thư mục gốc của mã nguồn để quét
      - name: SonarQube
        run: |
          docker run \
          --rm \
          -e SONAR_HOST_URL="${{env.SONAR_HOST_URL}}" \
          -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${{env.SONAR_PROJECT}} -Dsonar.exclusions=**/*.java -Xmx512m" \
          -e SONAR_TOKEN="${{env.SONAR_TOKEN}}" \
          -v "./:/usr/src" \
          sonarsource/sonar-scanner-cli


  # Upload Static Application Security Testing Results lên DefectDojo (tương tự Upload Secret Scanning)
  import-SAST:
    needs: SAST
    name: Upload Results
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: ls
        run: ls
      - name: import to DefectDojo
        uses: hoainamnv34/import-to-DefectDojo@main
        with:
          host: '${{env.DEFECTDOJO_URL}}'  
          product: ${{env.DOJO_PRODUCT}}
          engagement: ${{env.DOJO_ENGAGEMENT}}
          scan: 'SonarQube API Import'
          token:  ${{ env.DEFECT_DOJO_API_TOKEN }}
          active: "True"
          verified: "True"
          test_title: "Static Application Security Testing"
          close_old_findings: "True"
          close_old_findings_product_scope: "True"
          branch_tag: "${{ github.event.base_ref }}"
          commit_hash: "${{ github.sha }}"
          
  unit-test: 
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - name: Unit test
        run: echo "unit test"

  # Dockerfile Scanning 
  dockerfile-scanning:
    name: Dockerfile Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master  # Sử dụng "checkov-action" từ Bridgecrew để quét Dockerfile
        with:
          directory: . # Đường dẫn tới thư mục gốc của mã nguồn để quét
          framework: dockerfile  # Thiết lập framework quét là "dockerfile"
          soft_fail: true # Cho phép tiếp tục ngay cả khi quá trình quét phát hiện lỗi
          output_format: json  # Định dạng đầu ra của kết quả quét là JSON
          output_file_path: ./results  # Đường dẫn lưu kết quả quét
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: ./results

  # Upload Dockerfile Scanning Results lên DefectDojo (tương tự Upload Secret Scanning)
  import-dockerfile-scanning:
    needs: dockerfile-scanning
    name: Upload Results
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: checkov-report
          path: .
      - name: import to DefectDojo
        uses: hoainamnv34/import-to-DefectDojo@main
        with:
          host: '${{env.DEFECTDOJO_URL}}'
          product: ${{env.DOJO_PRODUCT}}
          engagement: ${{env.DOJO_ENGAGEMENT}}
          scan: 'Checkov Scan'
          report: 'results_json.json'
          token:  ${{ env.DEFECT_DOJO_API_TOKEN }}
          active: "True"
          verified: "True"
          test_title: "Dockerfile Scanning"
          close_old_findings: "True"
          close_old_findings_product_scope: "True"
          branch_tag: "${{ github.event.base_ref }}"
          commit_hash: "${{ github.sha }}"

  # Job đánh giá luồng sau khi Secret Scanning, SCA, SAST, Dockerfile Scan đã được thực hiện và upload kết quả lên DefectDojo
  evaluate-1:
    needs: [import-secret-Scanning, import-SCA, import-SAST, import-dockerfile-scanning] # Job này phụ thuộc vào các job khác gồm "import-secret-Scanning", "import-SCA", "import-SAST" và "import-dockerfile-scanning". Job này chỉ chạy sau khi các job kia hoàn thành.
    name: Evaluate Pipeline 1
    runs-on: ubuntu-latest
    steps:
      - name: import to DefectDojo
        uses: hoainamnv34/evaluate-pipeline@main
        with:
          host: '${{env.DEFECTDOJO_URL}}' # URL của DefectDojo Server, được lấy từ biến `DEFECTDOJO_URL`
          product: ${{env.DOJO_PRODUCT}}  # Tên Product trong DefectDojo, được lấy từ biến môi trường `DOJO_PRODUCT`
          engagement: ${{env.DOJO_ENGAGEMENT}} # Tên engagement trong DefectDojo, được lấy từ biến môi trường `DOJO_ENGAGEMENT`
          token:  ${{ env.DEFECT_DOJO_API_TOKEN }} # Token API của DefectDojo, được lấy từ secrets `DEFECT_DOJO_API_TOKEN`

  #Build Docker Image
  build:
    name: Build docker image
    needs: evaluate-1  # Job này phụ thuộc vào job "evaluate-1". Job này chỉ chạy sau khi "evaluate-1" hoàn thành.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Login Docker Hub  # Login Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}  # Tên người dùng Docker Hub, được lấy từ secrets `DOCKERHUB_USERNAME`
      #     password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }} # Mật khẩu hoặc token truy cập Docker Hub, được lấy từ secrets `DOCKERHUB_ACCESS_TOKEN`
      - name: Setup Docker Buildx # Thiết lập Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
    
      - name: Get environment variables # Lấy tên repo làm tên Image và sha_short để làm tag của Image
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV" 
          echo "repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ./  # Đặt context cho Docker build là thư mục hiện tại
          file: ./Dockerfile  # Đường dẫn đến Dockerfile
          builder: ${{ steps.buildx.outputs.name }}  # Sử dụng tên builder được tạo bởi bước thiết lập Buildx
          push: false  # Đẩy image lên Docker registry sau khi xây dựng
          tags: ${{ env.repo }}:${{ env.sha_short }}  # Gán tag cho image với tên repository và phần ngắn của commit SHA
          outputs: type=docker,dest=myimage.tar # Lưu output dưới dạng tệp tar với tên `myimage.tar`
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: image
          path: myimage.tar
      - name: Verify # Xác minh việc build Docker image
        run: echo ${{ steps.docker_build.outputs.digest }} # In ra digest của Docker image đã được build
        
  # Docker Image Scanning
  docker-image-scanning:
    needs: build
    name: Image Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image
      - name: Load image #Load image được download từ artifact 
        run: |
          docker load -i myimage.tar
          docker image ls -a

      - name: Get environment variables  # Lấy tên và tag của Image theo như job build 
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          echo "repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Scan image  # Bước quét Docker image
        uses: aquasecurity/trivy-action@0.20.0 # Sử dụng hành động "trivy-action" phiên bản 0.20.0 từ Aqua Security để quét Docker image
        with:
          image-ref: ${{ env.repo }}:${{ env.sha_short }} # Tham chiếu đến Docker image với tên repository và phần ngắn của commit SHA
          output: 'trivy-results.json'  # Đặt tên tệp kết quả là `trivy-results.json`
          format: json # Định dạng đầu ra là JSON
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cis-trivy-report
          path: trivy-results.json

  # Upload Docker Image Scanning Results lên DefectDojo (tương tự Upload Secret Scanning)
  import-image-scanning:
    needs: docker-image-scanning
    name: Upload Results
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: cis-trivy-report
          path: .
      - name: ls
        run: ls
      - name: import to DefectDojo
        uses: hoainamnv34/import-to-DefectDojo@main
        with:
          host: '${{env.DEFECTDOJO_URL}}'
          product: ${{env.DOJO_PRODUCT}}
          engagement: ${{env.DOJO_ENGAGEMENT}}
          scan: 'Trivy Scan'
          report: 'trivy-results.json'
          token:  ${{ env.DEFECT_DOJO_API_TOKEN }}
          active: "True"
          verified: "True"
          test_title: "Trivy Container Scanning"
          close_old_findings: "True"
          close_old_findings_product_scope: "True"
          branch_tag: "${{ github.event.base_ref }}"
          commit_hash: "${{ github.sha }}"
  
  # Job đánh giá luồng sau khi Docker Image Scanning đã được thực hiện và upload kết quả lên DefectDojo
  evaluate-2:
    needs: import-image-scanning
    name: Evaluate Pipeline 2
    runs-on: ubuntu-latest
    steps:
      - name: import to DefectDojo
        uses: hoainamnv34/evaluate-pipeline@main
        with:
          host: '${{env.DEFECTDOJO_URL}}'
          product: ${{env.DOJO_PRODUCT}}
          engagement: ${{env.DOJO_ENGAGEMENT}}
          token:  ${{ env.DEFECT_DOJO_API_TOKEN }}

  push-image-to-registry:
    needs: evaluate-2
    name: Push image to registry
    runs-on: ubuntu-latest
    steps:
      - name: Unit test
        run: echo "push-image-to-registry"
